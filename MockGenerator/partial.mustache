{{#initializer}}
    {{{declarationText}}} {
    {{{initializerCall}}}
    }
{{/initializer}}

{{#initializer}}
    {{{declarationText}}} {
    {{{initializerCall}}}
    }
{{/initializer}}

{{#property}}

    {{#hasSetter}}
        private(set) var {{name}}Setter = false
        private(set) var {{name}}SetterCount = 0
        private(set) var {{name}}: {{{optionalType}}}
        private(set) var {{name}}List = [{{{type}}}]()
    {{/hasSetter}}
    private(set) var {{name}}Getter = false
    private(set) var {{name}}GetterCount = 0
    {{scope}} var stubbed{{capitalizedUniqueName}}: {{{iuoType}}} {{{defaultValueAssignment}}}

    {{#isImplemented}}
        private(set) var forwardToOriginal{{capitalizedUniqueName}} = false
    {{/isImplemented}}

    {{{declarationText}}} {

    {{#hasSetter}}
        set {
        {{name}}Setter = true
        {{name}}SetterCount += 1
        {{name}} = newValue
        {{name}}List.append(newValue)
        {{#isImplemented}}
            if forwardToOriginal{{capitalizedUniqueName}} {
            super.{{name}} = newValue
            }
        {{/isImplemented}}
        }
        get {
        {{name}}Getter = true
        {{name}}GetterCount += 1
        {{#isImplemented}}
            if forwardToOriginal{{capitalizedUniqueName}} {
            return super.{{name}}
            }
        {{/isImplemented}}
        return stubbed{{capitalizedUniqueName}}
        }
    {{/hasSetter}}
    {{^hasSetter}}
        {{name}}Getter = true
        {{name}}GetterCount += 1
        {{#isImplemented}}
            if forwardToOriginal{{capitalizedUniqueName}} {
            return super.{{name}}
            }
        {{/isImplemented}}
        return stubbed{{capitalizedUniqueName}}
    {{/hasSetter}}

    }
{{/property}}


{{#subscript}}

    private(set) var {{name}}Getter = false
    private(set) var {{name}}GetterCount = 0
    {{#escapingParameters}}
        private(set) var {{name}}GetterParameters: {{{tupleRepresentation}}}?
        private(set) var {{name}}GetterParametersList = [{{{tupleRepresentation}}}]()
    {{/escapingParameters}}
    {{scope}} var stubbed{{capitalizedUniqueName}}Result: {{{resultType.iuoType}}} {{{resultType.defaultValueAssignment}}}

    {{#hasSetter}}
        private(set) var {{name}}Setter = false
        private(set) var {{name}}SetterCount = 0
        {{#escapingParameters}}
            private(set) var {{name}}SetterParameters: {{{tupleRepresentation}}}?
            private(set) var {{name}}SetterParametersList = [{{{tupleRepresentation}}}]()
        {{/escapingParameters}}
        private(set) var {{name}}: {{{resultType.type}}}?
        private(set) var {{name}}List = [{{{resultType.type}}}]()
    {{/hasSetter}}

    {{#isImplemented}}
        private(set) var forwardToOriginal{{capitalizedUniqueName}} = false
    {{/isImplemented}}

    {{{declarationText}}} {

    {{#hasSetter}}
        set {
        {{name}}Setter = true
        {{name}}SetterCount += 1
        {{#escapingParameters}}
            {{name}}SetterParameters = {{{tupleAssignment}}}
            {{name}}SetterParametersList.append({{{tupleAssignment}}})
        {{/escapingParameters}}
        {{name}} = newValue
        {{name}}List.append(newValue)
        {{#isImplemented}}
            if forwardToOriginal{{capitalizedUniqueName}} {
            super{{functionCall}} = newValue
            }
        {{/isImplemented}}
        }
        get {
        {{name}}Getter = true
        {{name}}GetterCount += 1
        {{#escapingParameters}}
            {{name}}GetterParameters = {{{tupleAssignment}}}
            {{name}}GetterParametersList.append({{{tupleAssignment}}})
        {{/escapingParameters}}
        {{#isImplemented}}
            if forwardToOriginal{{capitalizedUniqueName}} {
            return super{{functionCall}}
            }
        {{/isImplemented}}
        return stubbed{{capitalizedUniqueName}}Result
        }
    {{/hasSetter}}
    {{^hasSetter}}
        {{name}}Getter = true
        {{name}}GetterCount += 1
        {{#escapingParameters}}
            {{name}}GetterParameters = {{{tupleAssignment}}}
            {{name}}GetterParametersList.append({{{tupleAssignment}}})
        {{/escapingParameters}}
        {{#isImplemented}}
            if forwardToOriginal{{capitalizedUniqueName}} {
            return super{{functionCall}}
            }
        {{/isImplemented}}
        return stubbed{{capitalizedUniqueName}}Result
    {{/hasSetter}}
    }

{{/subscript}}

{{#method}}

    private(set) var {{name}} = false
    private(set) var {{name}}Count = 0

    {{#escapingParameters}}
        private(set) var {{name}}Parameters: {{{tupleRepresentation}}}?
        private(set) var {{name}}ParametersList = [{{{tupleRepresentation}}}]()
    {{/escapingParameters}}

    {{#closureParameter}}
        {{#hasArguments}}
            {{scope}} var stubbed{{capitalizedUniqueName}}{{capitalizedName}}Result: {{{argumentsTupleRepresentation}}}?
        {{/hasArguments}}
        {{^hasArguments}}
            {{scope}} var shouldInvoke{{capitalizedUniqueName}}{{capitalizedName}} = false
        {{/hasArguments}}
    {{/closureParameter}}

    {{#throws}}
        {{scope}} var stubbed{{capitalizedUniqueName}}Error: Error?
    {{/throws}}

    {{#resultType}}
        {{scope}} var stubbed{{capitalizedUniqueName}}Result: {{{iuoType}}} {{{defaultValueAssignment}}}
    {{/resultType}}

    {{#isImplemented}}
        {{scope}} var forwardToOriginal{{capitalizedUniqueName}} = false
    {{/isImplemented}}

    {{{declarationText}}} {

    {{name}} = true
    {{name}}Count += 1

    {{#escapingParameters}}
        {{name}}Parameters = {{{tupleAssignment}}}
        {{name}}ParametersList.append({{{tupleAssignment}}})
    {{/escapingParameters}}

    {{#isImplemented}}
        if forwardToOriginal{{capitalizedUniqueName}} {
        {{#resultType}}return {{/resultType}}{{#throws}}try {{/throws}}{{#rethrows}}try {{/rethrows}}super.{{functionCall}}
        {{^resultType}}return{{/resultType}}
        }
    {{/isImplemented}}

    {{#closureParameter}}
        {{#hasArguments}}
            if let result = stubbed{{capitalizedUniqueName}}{{capitalizedName}}Result {
            {{{implicitClosureCall}}}
            }
        {{/hasArguments}}
        {{^hasArguments}}
            if shouldInvoke{{capitalizedUniqueName}}{{capitalizedName}} {
            {{{implicitClosureCall}}}
            }
        {{/hasArguments}}
    {{/closureParameter}}

    {{#throws}}
        if let error = stubbed{{capitalizedUniqueName}}Error {
        throw error
        }
    {{/throws}}

    {{#resultType}}
        return stubbed{{capitalizedUniqueName}}Result{{returnCastStatement}}
    {{/resultType}}

    }
{{/method}}
